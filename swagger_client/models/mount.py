# coding: utf-8

"""
    Velocity-Sandbox

    API to create a Velocity Sandbox

    OpenAPI spec version: 1.0.0
    Contact: alay.vakil@veritas.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Mount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, mount_path=None, share_id=None, status=None, status_info=None, target_host=None):
        """
        Mount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'mount_path': 'str',
            'share_id': 'str',
            'status': 'str',
            'status_info': 'StatusInfo',
            'target_host': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'mount_path': 'mountPath',
            'share_id': 'shareId',
            'status': 'status',
            'status_info': 'statusInfo',
            'target_host': 'targetHost'
        }

        self._id = id
        self._mount_path = mount_path
        self._share_id = share_id
        self._status = status
        self._status_info = status_info
        self._target_host = target_host

    @property
    def id(self):
        """
        Gets the id of this Mount.

        :return: The id of this Mount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Mount.

        :param id: The id of this Mount.
        :type: str
        """

        self._id = id

    @property
    def mount_path(self):
        """
        Gets the mount_path of this Mount.

        :return: The mount_path of this Mount.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """
        Sets the mount_path of this Mount.

        :param mount_path: The mount_path of this Mount.
        :type: str
        """

        self._mount_path = mount_path

    @property
    def share_id(self):
        """
        Gets the share_id of this Mount.

        :return: The share_id of this Mount.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """
        Sets the share_id of this Mount.

        :param share_id: The share_id of this Mount.
        :type: str
        """

        self._share_id = share_id

    @property
    def status(self):
        """
        Gets the status of this Mount.

        :return: The status of this Mount.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Mount.

        :param status: The status of this Mount.
        :type: str
        """

        self._status = status

    @property
    def status_info(self):
        """
        Gets the status_info of this Mount.

        :return: The status_info of this Mount.
        :rtype: StatusInfo
        """
        return self._status_info

    @status_info.setter
    def status_info(self, status_info):
        """
        Sets the status_info of this Mount.

        :param status_info: The status_info of this Mount.
        :type: StatusInfo
        """

        self._status_info = status_info

    @property
    def target_host(self):
        """
        Gets the target_host of this Mount.

        :return: The target_host of this Mount.
        :rtype: str
        """
        return self._target_host

    @target_host.setter
    def target_host(self, target_host):
        """
        Sets the target_host of this Mount.

        :param target_host: The target_host of this Mount.
        :type: str
        """

        self._target_host = target_host

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Mount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
