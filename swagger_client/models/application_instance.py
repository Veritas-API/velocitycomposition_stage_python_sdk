# coding: utf-8

"""
    Velocity-Sandbox

    API to create a Velocity Sandbox

    OpenAPI spec version: 1.0.0
    Contact: alay.vakil@veritas.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplicationInstance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, asm_diskgroup_name=None, db_name=None, instances=None, status_code=None, status_info=None, uri=None):
        """
        ApplicationInstance - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'asm_diskgroup_name': 'str',
            'db_name': 'str',
            'instances': 'list[OracleInstance]',
            'status_code': 'int',
            'status_info': 'StatusInfo',
            'uri': 'str'
        }

        self.attribute_map = {
            'asm_diskgroup_name': 'asmDiskgroupName',
            'db_name': 'dbName',
            'instances': 'instances',
            'status_code': 'statusCode',
            'status_info': 'statusInfo',
            'uri': 'uri'
        }

        self._asm_diskgroup_name = asm_diskgroup_name
        self._db_name = db_name
        self._instances = instances
        self._status_code = status_code
        self._status_info = status_info
        self._uri = uri

    @property
    def asm_diskgroup_name(self):
        """
        Gets the asm_diskgroup_name of this ApplicationInstance.

        :return: The asm_diskgroup_name of this ApplicationInstance.
        :rtype: str
        """
        return self._asm_diskgroup_name

    @asm_diskgroup_name.setter
    def asm_diskgroup_name(self, asm_diskgroup_name):
        """
        Sets the asm_diskgroup_name of this ApplicationInstance.

        :param asm_diskgroup_name: The asm_diskgroup_name of this ApplicationInstance.
        :type: str
        """

        self._asm_diskgroup_name = asm_diskgroup_name

    @property
    def db_name(self):
        """
        Gets the db_name of this ApplicationInstance.

        :return: The db_name of this ApplicationInstance.
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """
        Sets the db_name of this ApplicationInstance.

        :param db_name: The db_name of this ApplicationInstance.
        :type: str
        """

        self._db_name = db_name

    @property
    def instances(self):
        """
        Gets the instances of this ApplicationInstance.

        :return: The instances of this ApplicationInstance.
        :rtype: list[OracleInstance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """
        Sets the instances of this ApplicationInstance.

        :param instances: The instances of this ApplicationInstance.
        :type: list[OracleInstance]
        """

        self._instances = instances

    @property
    def status_code(self):
        """
        Gets the status_code of this ApplicationInstance.

        :return: The status_code of this ApplicationInstance.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """
        Sets the status_code of this ApplicationInstance.

        :param status_code: The status_code of this ApplicationInstance.
        :type: int
        """

        self._status_code = status_code

    @property
    def status_info(self):
        """
        Gets the status_info of this ApplicationInstance.

        :return: The status_info of this ApplicationInstance.
        :rtype: StatusInfo
        """
        return self._status_info

    @status_info.setter
    def status_info(self, status_info):
        """
        Sets the status_info of this ApplicationInstance.

        :param status_info: The status_info of this ApplicationInstance.
        :type: StatusInfo
        """

        self._status_info = status_info

    @property
    def uri(self):
        """
        Gets the uri of this ApplicationInstance.

        :return: The uri of this ApplicationInstance.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this ApplicationInstance.

        :param uri: The uri of this ApplicationInstance.
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplicationInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
