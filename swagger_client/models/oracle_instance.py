# coding: utf-8

"""
    Velocity-Sandbox

    API to create a Velocity Sandbox

    OpenAPI spec version: 1.0.0
    Contact: alay.vakil@veritas.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OracleInstance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, host_name=None, instance_name=None, oracle_home_path=None, rac_node_name=None):
        """
        OracleInstance - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'host_name': 'str',
            'instance_name': 'str',
            'oracle_home_path': 'str',
            'rac_node_name': 'str'
        }

        self.attribute_map = {
            'host_name': 'hostName',
            'instance_name': 'instanceName',
            'oracle_home_path': 'oracleHomePath',
            'rac_node_name': 'racNodeName'
        }

        self._host_name = host_name
        self._instance_name = instance_name
        self._oracle_home_path = oracle_home_path
        self._rac_node_name = rac_node_name

    @property
    def host_name(self):
        """
        Gets the host_name of this OracleInstance.

        :return: The host_name of this OracleInstance.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """
        Sets the host_name of this OracleInstance.

        :param host_name: The host_name of this OracleInstance.
        :type: str
        """

        self._host_name = host_name

    @property
    def instance_name(self):
        """
        Gets the instance_name of this OracleInstance.

        :return: The instance_name of this OracleInstance.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """
        Sets the instance_name of this OracleInstance.

        :param instance_name: The instance_name of this OracleInstance.
        :type: str
        """

        self._instance_name = instance_name

    @property
    def oracle_home_path(self):
        """
        Gets the oracle_home_path of this OracleInstance.

        :return: The oracle_home_path of this OracleInstance.
        :rtype: str
        """
        return self._oracle_home_path

    @oracle_home_path.setter
    def oracle_home_path(self, oracle_home_path):
        """
        Sets the oracle_home_path of this OracleInstance.

        :param oracle_home_path: The oracle_home_path of this OracleInstance.
        :type: str
        """

        self._oracle_home_path = oracle_home_path

    @property
    def rac_node_name(self):
        """
        Gets the rac_node_name of this OracleInstance.

        :return: The rac_node_name of this OracleInstance.
        :rtype: str
        """
        return self._rac_node_name

    @rac_node_name.setter
    def rac_node_name(self, rac_node_name):
        """
        Sets the rac_node_name of this OracleInstance.

        :param rac_node_name: The rac_node_name of this OracleInstance.
        :type: str
        """

        self._rac_node_name = rac_node_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OracleInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
