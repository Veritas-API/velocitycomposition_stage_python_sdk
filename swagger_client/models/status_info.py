# coding: utf-8

"""
    Velocity-Sandbox

    API to create a Velocity Sandbox

    OpenAPI spec version: 1.0.0
    Contact: alay.vakil@veritas.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StatusInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, error_msg=None, msg_id=None, parameters=None, solution_msg=None):
        """
        StatusInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'error_msg': 'str',
            'msg_id': 'str',
            'parameters': 'list[StatusInfoParameter]',
            'solution_msg': 'str'
        }

        self.attribute_map = {
            'error_msg': 'errorMsg',
            'msg_id': 'msgId',
            'parameters': 'parameters',
            'solution_msg': 'solutionMsg'
        }

        self._error_msg = error_msg
        self._msg_id = msg_id
        self._parameters = parameters
        self._solution_msg = solution_msg

    @property
    def error_msg(self):
        """
        Gets the error_msg of this StatusInfo.

        :return: The error_msg of this StatusInfo.
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """
        Sets the error_msg of this StatusInfo.

        :param error_msg: The error_msg of this StatusInfo.
        :type: str
        """

        self._error_msg = error_msg

    @property
    def msg_id(self):
        """
        Gets the msg_id of this StatusInfo.
        An ID that can be used to look up a localized string

        :return: The msg_id of this StatusInfo.
        :rtype: str
        """
        return self._msg_id

    @msg_id.setter
    def msg_id(self, msg_id):
        """
        Sets the msg_id of this StatusInfo.
        An ID that can be used to look up a localized string

        :param msg_id: The msg_id of this StatusInfo.
        :type: str
        """
        if msg_id is None:
            raise ValueError("Invalid value for `msg_id`, must not be `None`")

        self._msg_id = msg_id

    @property
    def parameters(self):
        """
        Gets the parameters of this StatusInfo.
        Optional parameters that further clarfiy the information about the error

        :return: The parameters of this StatusInfo.
        :rtype: list[StatusInfoParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this StatusInfo.
        Optional parameters that further clarfiy the information about the error

        :param parameters: The parameters of this StatusInfo.
        :type: list[StatusInfoParameter]
        """

        self._parameters = parameters

    @property
    def solution_msg(self):
        """
        Gets the solution_msg of this StatusInfo.

        :return: The solution_msg of this StatusInfo.
        :rtype: str
        """
        return self._solution_msg

    @solution_msg.setter
    def solution_msg(self, solution_msg):
        """
        Sets the solution_msg of this StatusInfo.

        :param solution_msg: The solution_msg of this StatusInfo.
        :type: str
        """

        self._solution_msg = solution_msg

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StatusInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
