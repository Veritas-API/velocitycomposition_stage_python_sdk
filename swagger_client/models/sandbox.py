# coding: utf-8

"""
    Velocity-Sandbox

    API to create a Velocity Sandbox

    OpenAPI spec version: 1.0.0
    Contact: alay.vakil@veritas.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Sandbox(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, active_share_client_ips=None, application_hosts=None, application_instance=None, copy_preparation=None, creation_time=None, description=None, expiry_time=None, id=None, mounts=None, name=None, owner=None, point_in_time_creation_time=None, point_in_time_id=None, properties=None, sandbox_config=None, share_location=None, shares_op_state_update_batch_time=None, state=None, status_info=None, storage_server_id=None, storage_server_record_id=None, target_hosts=None, type=None, workload_id=None):
        """
        Sandbox - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active_share_client_ips': 'list[str]',
            'application_hosts': 'list[ApplicationHostInfo]',
            'application_instance': 'ApplicationInstance',
            'copy_preparation': 'bool',
            'creation_time': 'int',
            'description': 'str',
            'expiry_time': 'int',
            'id': 'str',
            'mounts': 'list[Mount]',
            'name': 'str',
            'owner': 'User',
            'point_in_time_creation_time': 'int',
            'point_in_time_id': 'str',
            'properties': 'HashMapstringobject',
            'sandbox_config': 'SandboxConfig',
            'share_location': 'ShareLocation',
            'shares_op_state_update_batch_time': 'int',
            'state': 'str',
            'status_info': 'StatusInfo',
            'storage_server_id': 'str',
            'storage_server_record_id': 'str',
            'target_hosts': 'list[str]',
            'type': 'str',
            'workload_id': 'str'
        }

        self.attribute_map = {
            'active_share_client_ips': 'activeShareClientIps',
            'application_hosts': 'applicationHosts',
            'application_instance': 'applicationInstance',
            'copy_preparation': 'copyPreparation',
            'creation_time': 'creationTime',
            'description': 'description',
            'expiry_time': 'expiryTime',
            'id': 'id',
            'mounts': 'mounts',
            'name': 'name',
            'owner': 'owner',
            'point_in_time_creation_time': 'pointInTimeCreationTime',
            'point_in_time_id': 'pointInTimeId',
            'properties': 'properties',
            'sandbox_config': 'sandboxConfig',
            'share_location': 'shareLocation',
            'shares_op_state_update_batch_time': 'sharesOpStateUpdateBatchTime',
            'state': 'state',
            'status_info': 'statusInfo',
            'storage_server_id': 'storageServerId',
            'storage_server_record_id': 'storageServerRecordId',
            'target_hosts': 'targetHosts',
            'type': 'type',
            'workload_id': 'workloadId'
        }

        self._active_share_client_ips = active_share_client_ips
        self._application_hosts = application_hosts
        self._application_instance = application_instance
        self._copy_preparation = copy_preparation
        self._creation_time = creation_time
        self._description = description
        self._expiry_time = expiry_time
        self._id = id
        self._mounts = mounts
        self._name = name
        self._owner = owner
        self._point_in_time_creation_time = point_in_time_creation_time
        self._point_in_time_id = point_in_time_id
        self._properties = properties
        self._sandbox_config = sandbox_config
        self._share_location = share_location
        self._shares_op_state_update_batch_time = shares_op_state_update_batch_time
        self._state = state
        self._status_info = status_info
        self._storage_server_id = storage_server_id
        self._storage_server_record_id = storage_server_record_id
        self._target_hosts = target_hosts
        self._type = type
        self._workload_id = workload_id

    @property
    def active_share_client_ips(self):
        """
        Gets the active_share_client_ips of this Sandbox.
        A set of IP addresses of machines that are actively using this share.

        :return: The active_share_client_ips of this Sandbox.
        :rtype: list[str]
        """
        return self._active_share_client_ips

    @active_share_client_ips.setter
    def active_share_client_ips(self, active_share_client_ips):
        """
        Sets the active_share_client_ips of this Sandbox.
        A set of IP addresses of machines that are actively using this share.

        :param active_share_client_ips: The active_share_client_ips of this Sandbox.
        :type: list[str]
        """

        self._active_share_client_ips = active_share_client_ips

    @property
    def application_hosts(self):
        """
        Gets the application_hosts of this Sandbox.
        For automation releases, added a list of application hosts along with their URI's

        :return: The application_hosts of this Sandbox.
        :rtype: list[ApplicationHostInfo]
        """
        return self._application_hosts

    @application_hosts.setter
    def application_hosts(self, application_hosts):
        """
        Sets the application_hosts of this Sandbox.
        For automation releases, added a list of application hosts along with their URI's

        :param application_hosts: The application_hosts of this Sandbox.
        :type: list[ApplicationHostInfo]
        """

        self._application_hosts = application_hosts

    @property
    def application_instance(self):
        """
        Gets the application_instance of this Sandbox.

        :return: The application_instance of this Sandbox.
        :rtype: ApplicationInstance
        """
        return self._application_instance

    @application_instance.setter
    def application_instance(self, application_instance):
        """
        Sets the application_instance of this Sandbox.

        :param application_instance: The application_instance of this Sandbox.
        :type: ApplicationInstance
        """

        self._application_instance = application_instance

    @property
    def copy_preparation(self):
        """
        Gets the copy_preparation of this Sandbox.
        Flag which indicate Copy Preparation is enabled or not

        :return: The copy_preparation of this Sandbox.
        :rtype: bool
        """
        return self._copy_preparation

    @copy_preparation.setter
    def copy_preparation(self, copy_preparation):
        """
        Sets the copy_preparation of this Sandbox.
        Flag which indicate Copy Preparation is enabled or not

        :param copy_preparation: The copy_preparation of this Sandbox.
        :type: bool
        """

        self._copy_preparation = copy_preparation

    @property
    def creation_time(self):
        """
        Gets the creation_time of this Sandbox.
        Sandbox creation time

        :return: The creation_time of this Sandbox.
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this Sandbox.
        Sandbox creation time

        :param creation_time: The creation_time of this Sandbox.
        :type: int
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def description(self):
        """
        Gets the description of this Sandbox.
        Short description of the sandbox

        :return: The description of this Sandbox.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Sandbox.
        Short description of the sandbox

        :param description: The description of this Sandbox.
        :type: str
        """

        self._description = description

    @property
    def expiry_time(self):
        """
        Gets the expiry_time of this Sandbox.
        Sandbox expiry time

        :return: The expiry_time of this Sandbox.
        :rtype: int
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """
        Sets the expiry_time of this Sandbox.
        Sandbox expiry time

        :param expiry_time: The expiry_time of this Sandbox.
        :type: int
        """
        if expiry_time is None:
            raise ValueError("Invalid value for `expiry_time`, must not be `None`")

        self._expiry_time = expiry_time

    @property
    def id(self):
        """
        Gets the id of this Sandbox.
        A unique identifier of the sandbox object

        :return: The id of this Sandbox.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Sandbox.
        A unique identifier of the sandbox object

        :param id: The id of this Sandbox.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mounts(self):
        """
        Gets the mounts of this Sandbox.

        :return: The mounts of this Sandbox.
        :rtype: list[Mount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts):
        """
        Sets the mounts of this Sandbox.

        :param mounts: The mounts of this Sandbox.
        :type: list[Mount]
        """

        self._mounts = mounts

    @property
    def name(self):
        """
        Gets the name of this Sandbox.
        Name of the sandbox

        :return: The name of this Sandbox.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Sandbox.
        Name of the sandbox

        :param name: The name of this Sandbox.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """
        Gets the owner of this Sandbox.

        :return: The owner of this Sandbox.
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Sandbox.

        :param owner: The owner of this Sandbox.
        :type: User
        """

        self._owner = owner

    @property
    def point_in_time_creation_time(self):
        """
        Gets the point_in_time_creation_time of this Sandbox.
        Time the point-in-time this sandbox is based on was created

        :return: The point_in_time_creation_time of this Sandbox.
        :rtype: int
        """
        return self._point_in_time_creation_time

    @point_in_time_creation_time.setter
    def point_in_time_creation_time(self, point_in_time_creation_time):
        """
        Sets the point_in_time_creation_time of this Sandbox.
        Time the point-in-time this sandbox is based on was created

        :param point_in_time_creation_time: The point_in_time_creation_time of this Sandbox.
        :type: int
        """
        if point_in_time_creation_time is None:
            raise ValueError("Invalid value for `point_in_time_creation_time`, must not be `None`")

        self._point_in_time_creation_time = point_in_time_creation_time

    @property
    def point_in_time_id(self):
        """
        Gets the point_in_time_id of this Sandbox.
        Id of pointInTime for which this sandbox was created

        :return: The point_in_time_id of this Sandbox.
        :rtype: str
        """
        return self._point_in_time_id

    @point_in_time_id.setter
    def point_in_time_id(self, point_in_time_id):
        """
        Sets the point_in_time_id of this Sandbox.
        Id of pointInTime for which this sandbox was created

        :param point_in_time_id: The point_in_time_id of this Sandbox.
        :type: str
        """
        if point_in_time_id is None:
            raise ValueError("Invalid value for `point_in_time_id`, must not be `None`")

        self._point_in_time_id = point_in_time_id

    @property
    def properties(self):
        """
        Gets the properties of this Sandbox.
        Sandbox properties. To be used for any type specific sandbox properties

        :return: The properties of this Sandbox.
        :rtype: HashMapstringobject
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this Sandbox.
        Sandbox properties. To be used for any type specific sandbox properties

        :param properties: The properties of this Sandbox.
        :type: HashMapstringobject
        """

        self._properties = properties

    @property
    def sandbox_config(self):
        """
        Gets the sandbox_config of this Sandbox.

        :return: The sandbox_config of this Sandbox.
        :rtype: SandboxConfig
        """
        return self._sandbox_config

    @sandbox_config.setter
    def sandbox_config(self, sandbox_config):
        """
        Sets the sandbox_config of this Sandbox.

        :param sandbox_config: The sandbox_config of this Sandbox.
        :type: SandboxConfig
        """

        self._sandbox_config = sandbox_config

    @property
    def share_location(self):
        """
        Gets the share_location of this Sandbox.

        :return: The share_location of this Sandbox.
        :rtype: ShareLocation
        """
        return self._share_location

    @share_location.setter
    def share_location(self, share_location):
        """
        Sets the share_location of this Sandbox.

        :param share_location: The share_location of this Sandbox.
        :type: ShareLocation
        """

        self._share_location = share_location

    @property
    def shares_op_state_update_batch_time(self):
        """
        Gets the shares_op_state_update_batch_time of this Sandbox.

        :return: The shares_op_state_update_batch_time of this Sandbox.
        :rtype: int
        """
        return self._shares_op_state_update_batch_time

    @shares_op_state_update_batch_time.setter
    def shares_op_state_update_batch_time(self, shares_op_state_update_batch_time):
        """
        Sets the shares_op_state_update_batch_time of this Sandbox.

        :param shares_op_state_update_batch_time: The shares_op_state_update_batch_time of this Sandbox.
        :type: int
        """

        self._shares_op_state_update_batch_time = shares_op_state_update_batch_time

    @property
    def state(self):
        """
        Gets the state of this Sandbox.
        Current state of the sandbox

        :return: The state of this Sandbox.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Sandbox.
        Current state of the sandbox

        :param state: The state of this Sandbox.
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def status_info(self):
        """
        Gets the status_info of this Sandbox.
        More info about the state of the share and why it is in the state it is in

        :return: The status_info of this Sandbox.
        :rtype: StatusInfo
        """
        return self._status_info

    @status_info.setter
    def status_info(self, status_info):
        """
        Sets the status_info of this Sandbox.
        More info about the state of the share and why it is in the state it is in

        :param status_info: The status_info of this Sandbox.
        :type: StatusInfo
        """

        self._status_info = status_info

    @property
    def storage_server_id(self):
        """
        Gets the storage_server_id of this Sandbox.
        A unique identifier of the storage server hosting the sandbox

        :return: The storage_server_id of this Sandbox.
        :rtype: str
        """
        return self._storage_server_id

    @storage_server_id.setter
    def storage_server_id(self, storage_server_id):
        """
        Sets the storage_server_id of this Sandbox.
        A unique identifier of the storage server hosting the sandbox

        :param storage_server_id: The storage_server_id of this Sandbox.
        :type: str
        """
        if storage_server_id is None:
            raise ValueError("Invalid value for `storage_server_id`, must not be `None`")

        self._storage_server_id = storage_server_id

    @property
    def storage_server_record_id(self):
        """
        Gets the storage_server_record_id of this Sandbox.
        storage server supplied unique recordId for this sandbox

        :return: The storage_server_record_id of this Sandbox.
        :rtype: str
        """
        return self._storage_server_record_id

    @storage_server_record_id.setter
    def storage_server_record_id(self, storage_server_record_id):
        """
        Sets the storage_server_record_id of this Sandbox.
        storage server supplied unique recordId for this sandbox

        :param storage_server_record_id: The storage_server_record_id of this Sandbox.
        :type: str
        """
        if storage_server_record_id is None:
            raise ValueError("Invalid value for `storage_server_record_id`, must not be `None`")

        self._storage_server_record_id = storage_server_record_id

    @property
    def target_hosts(self):
        """
        Gets the target_hosts of this Sandbox.
        a list of application hosts for the sandbox

        :return: The target_hosts of this Sandbox.
        :rtype: list[str]
        """
        return self._target_hosts

    @target_hosts.setter
    def target_hosts(self, target_hosts):
        """
        Sets the target_hosts of this Sandbox.
        a list of application hosts for the sandbox

        :param target_hosts: The target_hosts of this Sandbox.
        :type: list[str]
        """

        self._target_hosts = target_hosts

    @property
    def type(self):
        """
        Gets the type of this Sandbox.
        The type of sandbox.

        :return: The type of this Sandbox.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Sandbox.
        The type of sandbox.

        :param type: The type of this Sandbox.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def workload_id(self):
        """
        Gets the workload_id of this Sandbox.
        Id of workload for which this sandbox was created

        :return: The workload_id of this Sandbox.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """
        Sets the workload_id of this Sandbox.
        Id of workload for which this sandbox was created

        :param workload_id: The workload_id of this Sandbox.
        :type: str
        """
        if workload_id is None:
            raise ValueError("Invalid value for `workload_id`, must not be `None`")

        self._workload_id = workload_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Sandbox):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
